<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component implements="ui:scrollerEmbeddable, ui:virtualComponent" support="BETA" description="List of items generated by using the same component.">
    <aura:import library="ui:SVGLibrary" property="svgLib"/>

    <aura:attribute name="_dirty"       type="Integer" description="For internal use only. A counter to evaluate dirtyness."/>
    <aura:attribute name="itemTemplate" type="Aura.ComponentDefRef[]" required="true" description="The component to be iterated over." />
    <aura:attribute name="items"        type="Object[]" description="The items to be appended to the template."/>
    <aura:attribute name="forceRender"  type="Boolean" default="false" description="Rerenders an item even if it's not marked dirty. The default is false."/>
    <aura:attribute name="itemVar"      type="String"           required="true" description="Name for the variable to iterate over the items."/>
    <aura:attribute name="dataProvider" type="Aura.Component[]" description="If dataProvider is provided, items is ignored."/>
    
    <!-- For multi-template lists -->
    <aura:attribute name="templateMap" type="Object" description="A map of templates for lists that use multiple templates. If templateMap is provided, itemTemplate is ignored."/>
    
    <aura:method name="addTemplate" description="Adds a template to the list without rerendering." >
        <aura:attribute name="key" type="object" required="true" description="The key that returns a value on the template." />
        <aura:attribute name="template" type="Object" required="true" description="The template that's used to generate item in the list." />
    </aura:method>

    <aura:method name="rerenderList" description="Rerenders the entire list."/>
    <aura:method name="appendItems" description="Appends items to the list.">
        <aura:attribute name="items" type="Object" required="true" description="Items to be appended to the list."/>
    </aura:method>
    <aura:method name="updateItem" description="Updates an item in the list without rerendering the entire list.">
        <aura:attribute name="item" type="Object" required="true" description="Updated item to be placed in the list."/>
        <aura:attribute name="index" type="Integer" description="Optional. Index of the item within the list."/>
    </aura:method>
    <aura:method name="getComponentByIndex">
        <aura:attribute name="index" type="Integer" required="true" description="Index within the list"/>
        <aura:attribute name="callback" type="Function" required="true" description="Callback which takes the component as its first parameter"/>
    </aura:method>

    <aura:handler name="init" value="{!this}" action="{!c.init}"/>
    <aura:handler name="destroy" value="{!this}" action="{!c.destroy}"/>
    <aura:handler name="change" value="{!v.items}" action="{!c.handleItemsChange}"/>
    <aura:handler name="change" value="{!v.itemTemplate}" action="{!c.handleTemplateChange}"/>
    <aura:handler name="change" value="{!v.templateMap}" action="{!c.handleTemplateMapChange}"/>
    {!v.body}
</aura:component>