<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			 A <code>ui:inputSelect</code> component is rendered as an HTML <code>select</code> element.
             To apply Lightning Design System styling, we recommend that you use <code>lightning:select</code> instead of <code>ui:inputSelect</code>.
        </p>
        <p>     
             <code>ui:inputSelect</code> contains options, represented by the <code>ui:inputSelectOption</code> components. To enable multiple selections, set <code>multiple="true"</code>.
			 To wire up any client-side logic when an input value is selected, use the <code>change</code> event. 
		</p>
<pre>&lt;ui:inputSelect multiple="true">
    &lt;ui:inputSelectOption text="All Primary" label="All Contacts" value="true"/>
    &lt;ui:inputSelectOption text="All Primary" label="All Primary"/>
    &lt;ui:inputSelectOption text="All Secondary" label="All Secondary"/>
&lt;/ui:inputSelect></pre>
<p><code>v.value</code> represents the option's HTML <code>selected</code> attribute, and <code>v.text</code> represents the option's
HTML <code>value</code> attribute.</p>

                <h4>Generating Options with <code>aura:iteration</code></h4>
                 <p>You can use <code>aura:iteration</code> to iterate over a list of items to generate options. 
                 This example iterates over a list of items and handles the change event.</p>
<pre>&lt;aura:attribute name="contactLevel" type="String[]" default="Primary Contact, Secondary Contact, Other"/>
    &lt;ui:inputSelect aura:id="levels" label="Contact Levels" change="{!c.onSelectChange}">
        &lt;aura:iteration items="{!v.contactLevel}" var="level">
             &lt;ui:inputSelectOption text="{!level}" label="{!level}"/>
        &lt;/aura:iteration>
    &lt;/ui:inputSelect></pre>
    <p>When the selected option changes, this client-side controller retrieves the new text value.</p>
<pre>onSelectChange : function(component, event, helper) {
    var selected = component.find("levels").get("v.value");
    //do something else
}</pre>
		<h4>Generating Options Dynamically</h4>
		<p>
		    Generate the options dynamically on component initialization using a controller-side action.
		</p>
<pre>&lt;aura:component>
    &lt;aura:handler name="init" value="{!this}" action="{!c.doInit}"/>
    &lt;ui:inputSelect label="Select me:" class="dynamic" aura:id="InputSelectDynamic"/>
&lt;/aura:component>
		</pre>
		<p>
			The following client-side controller generates options using the options attribute on the <code>ui:inputSelect</code> component. <code>v.options</code> takes in the list of objects and converts them into list options.
			The <code>opts</code> object constructs <code>InputOption</code> objects to create the <code>ui:inputSelectOptions</code> components within <code>ui:inputSelect</code>. 
			Although the sample code generates the options during initialization, the list of options can be modified anytime when you manipulate the list in <code>v.options</code>. The component automatically updates itself and rerenders with the new options.
		</p>
		<pre>
({
    doInit : function(cmp) {
        var opts = [
            { class: "optionClass", label: "Option1", value: "opt1", selected: "true" },
            { class: "optionClass", label: "Option2", value: "opt2" },
            { class: "optionClass", label: "Option3", value: "opt3" }
           
        ];
        cmp.find("InputSelectDynamic").set("v.options", opts);
    }
})		
		</pre>
		<p><code>class</code> is a reserved keyword that might not work with older versions of Internet Explorer. We recommend using <code>"class"</code> with double quotes.
                If youâ€™re reusing the same set of options on multiple drop-down lists, use different attributes for each set of options. Otherwise, selecting a different option in one list also updates other list options bound to the same attribute.</p>
<pre>&lt;aura:attribute name="options1" type="String" />
&lt;aura:attribute name="options2" type="String" />
&lt;ui:inputSelect aura:id="Select1" label="Select1" options="{!v.options1}" />
&lt;ui:inputSelect aura:id="Select2" label="Select2" options="{!v.options2}" />
</pre>		
		<h4>Usage Considerations</h4>
        <p>Using <code>ui:inputSelect</code> with Lightning Runtime for Flows is supported, but empty option labels are not supported. 
        To create a picklist field on an object and set an empty default value, use a formula inside the flow to substitute empty values to a value like <code>--EMPTY--</code>.
		Using the substitute value ensures that the empty picklist value does not get replaced by the label of the picklist variable created in the flow.</p>
	</aura:description>	
		<aura:example name="inputselect" ref="auradocs:demoSelect" label="Using ui:inputSelect">
    	<p>This example displays a drop-down list with single and multiple selection enabled, and another with dynamically generated list options. It retrieves the selected value of a <code>ui:inputSelect</code> component.
        To apply Lightning Design System styling, we recommend that you use <code>lightning:select</code> instead of <code>ui:inputSelect</code>.</p>
    	
	</aura:example>
	
</aura:documentation>
