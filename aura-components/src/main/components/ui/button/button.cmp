<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:component extensible="true" support="GA" access="GLOBAL"
                description="Represents a button element.">

    <aura:attribute name="buttonTitle" type="String" access="GLOBAL" description="The text displayed in a tooltip when the mouse pointer hovers over the button."/>
    <aura:attribute name="buttonType" type="String" default="button" access="GLOBAL" description="Specifies the type of button. Possible values: reset, submit, or button. This value defaults to button." />
    <aura:attribute name="class" type="String" default="" access="GLOBAL" description="A CSS style to be attached to the button. This style is added in addition to base styles output by the component."/>
    <aura:attribute name="variant" type="String" access="PRIVILEGED" default="" description="Replacement CSS class(es) to output in place of injected classes"/>
    <aura:attribute name="label" type="String" access="GLOBAL" description="The text displayed on the button. Corresponds to the value attribute of the rendered HTML input element."/>
    <aura:attribute name="labelClass" type="String" default="" access="GLOBAL" description="A CSS style to be attached to the label. This style is added in addition to base styles output by the component."/>
    <aura:attribute name="labelDisplay" type="Boolean" default="true" description="Specifies whether the label is displayed. If not, we add a hidden text for accessibility purpose."/>
    <aura:attribute name="iconImgSrc" type="String" default="" description="The absolute or relative URL of the icon to display on the button. The image's alt attribute is set to the value of the buttonâ€™s label attribute."/>
    <aura:attribute name="iconClass" type="String" default="" description="A CSS style to be attached to the button's icon. This style is added in addition to base styles output by the component."/>
    <aura:attribute name="selectedClass" type="String" default="is-selected" description="The class applied when the button is selected"/>
    <aura:attribute name="notSelectedClass" type="String" default="not-selected" description="The class applied when the button is not selected"/>
    <aura:attribute name="classList" type="String" access="PRIVATE" default="" description="The list of classes rendered to the element"/>
    <aura:attribute name="disabled" type="Boolean" default="false" access="GLOBAL" description="Specifies whether this button should be displayed in a disabled state. Disabled buttons can't be clicked. Default value is &quot;false&quot;."/>
    <aura:attribute name="accesskey" type="String" access="GLOBAL" description="The keyboard access key that puts the button in focus. When the button is in focus, pressing Enter clicks the button."/>
    <aura:attribute name="labelDir" type="String" default="ltr" description="The direction in which the label should be read. Possible values: rtl (right to left) and ltr (left to right). This value defaults to ltr."/>
    <aura:attribute name="stopPropagation" type="Boolean" default="false" description="Prevents the click event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event."/>
    <aura:attribute name="tabIndex" type="Integer" description="The tab index of the button element."/>
    <aura:attribute name="stateful" type="Boolean" default="false" description="A stateful button can be selected."/>
    <aura:attribute name="selected" type="Boolean" default="false" description="If a button is stateful this value toggles selected"/>

    <aura:registerevent name="press"     type="ui:press"     access="GLOBAL" description="The event fired when the button is clicked."/>
    <aura:registerevent name="keydown"   type="ui:keydown"   access="INTERNAL" description="The event fired when a key is pressed down on the button."/>
    <aura:registerevent name="mouseover" type="ui:mouseover" access="INTERNAL" description="The event fired when the mouse hovers over the button."/>
    <aura:registerevent name="mouseout"  type="ui:mouseout"  access="INTERNAL" description="The event fired when the mouse moves off the button"/>
    <aura:registerevent name="focus"     type="ui:focus"     access="INTERNAL" description="The event fired when the button receives focus."/>
    <aura:registerevent name="blur"      type="ui:blur"      access="INTERNAL" description="The event fired the button loses focus."/>

    <aura:method name="addHandler" description="Adds a binding for DOM->Action handler">
        <aura:attribute name="eventName"  type="String" />
        <aura:attribute name="valueProvider"  type="Object" />
        <aura:attribute name="actionExpression" type="Aura.Action"/>
    </aura:method>

    <aura:handler name="init" value="{!this}" action="{!c.init}"/>

    <!--
        NOTE: This events will be added programatically to avoid extra DOM handlers
        This won't be necessary once we apply delegation events at the framework level

        onclick="{!c.press}"
        onkeydown="{!c.handleKeydown}"
        onmouseover="{!c.mouseover}"
        onmouseout="{!c.mouseout}"
        onfocus="{!c.focus}"
        onblur="{!c.blur}"
    -->

    <aura:locator target="button" isPrimitive="true" description="Simple UI button"/>

    <button type="{!v.buttonType}"
            aura:id="button"
            class="{!join(' ', v.variant || token('uiButton.button'), v.stateful ? v.selected ? 'is-selected ' + token('uiButton.is-selected') : 'not-selected ' + token('uiButton.not-selected') : '', v.class)}"
            disabled="{!v.disabled}"
            accesskey="{!v.accesskey}"
            title="{!v.buttonTitle}"
            tabindex="{!v.tabIndex}"
            aura:flavorable="true" aria-live="{!v.stateful ? 'assertive': 'off'}">

        <aura:if isTrue="{! v.iconImgSrc != '' || v.iconClass != '' }">
            <img src="{! v.iconImgSrc != '' ? v.iconImgSrc : '/auraFW/resources/aura/s.gif'}" class="{! v.iconClass + ' icon bLeft' }" alt=""/>
        </aura:if>

        <aura:if isTrue="{!v.labelDisplay &amp;&amp; !empty(v.label)}">
            <span aura:id="span" class="{! v.labelClass + ' label bBody' }" dir="{!v.labelDir}">
                {!v.label}
            </span>
            <aura:set attribute="else">
                <aura:if isTrue="{!!empty(v.label)}">
                    <span aura:id="hidden" class="assistiveText">
                        {!v.label}
                    </span>
                </aura:if>
            </aura:set>
        </aura:if>
        {!v.body}
    </button>
</aura:component>
