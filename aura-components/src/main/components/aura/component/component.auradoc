<!--

    Copyright (C) 2013 salesforce.com, inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<aura:documentation>
	<aura:description>
		<p>
			Components are the functional units of Aura, which encapsulate modular and reusable sections of UI. They can contain other components or HTML markup.
			The public parts of a component are its attributes and events. Aura provides out-of-the-box components in the <code>aura</code> and <code>ui</code> namespaces.
		</p>
		<p>
			Every component is part of a namespace. For example, the <code>button</code> component is saved as <code>button.cmp</code> in the <code>ui</code> namespace can be referenced in another component
			with the syntax <code>&lt;ui:button label="Submit"/&gt;</code>, where <code>label="Submit"</code> is an attribute setting.
		</p>
		<p>
			To create a component, follow this syntax.
<pre>
&lt;aura:component&gt;
  &lt;!-- Optional component attributes here -->
  &lt;!-- Optional HTML markup -->
  &lt;div class="container"&gt; 
    Hello world!
    &lt;!-- Other components -->
  &lt;/div&gt;
&lt;/aura:component&gt;

</pre>
		</p>
        <p>The <code>aura:component</code> tag has the following optional attributes.</p>
        <table>
      <tr>
        <th>Attribute</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
         <td>access</td>
         <td>String</td>
         <td>Indicates whether the component can be used outside of its own namespace. Possible values are <code>public</code> (default), and <code>global</code>.</td>
       </tr>
       <tr>
         <td>controller</td>
         <td>String</td>
         <td>The server-side controller class for the component in the format <code>namespace.myController</code> or <code>myController</code> if using the default namespace.</td>
       </tr>
       <tr>
        <td>description</td>
        <td>String</td>
        <td>A description of the component.</td>
      </tr>
       <tr>
        <td>extends</td>
        <td>Component</td>
        <td>The component to be extended.</td>
      </tr>
      <tr>
        <td>extensible</td>
        <td>Boolean</td>
        <td>Set to <code>true</code> if the component can be extended. The default is <code>false</code>.</td>
      </tr>
      <tr>
        <td>implements</td>
        <td>String</td>
        <td>A comma-separated list of interfaces that the component implements.</td>
      </tr>
      <tr>
        <td>isTemplate</td>
        <td>Boolean</td>
        <td>Set to true if the component is a template. The default is <code>false</code>. A template must have <code>isTemplate="true"</code> set in its <code>aura:component</code> tag.</td>
      </tr>
      <tr>
        <td>template</td>
        <td>Component</td>
        <td>The template for this component. A template bootstraps loading of the framework and app. The default template is <code>aura:template</code>. You can customize the template by creating your own component that extends the default template.
        For more information, see the <a href="https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/apps_template_overview.htm" target="_blank">Lightning Components Developer Guide</a>.</td>
      </tr>
    </table>
	</aura:description>	
		
	
</aura:documentation>
